GAS LISTING /tmp/cc0uRBCP.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB32:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** #include "../h/_thread.hpp"
   5:src/riscv.cpp **** #include "../lib/console.h"
   6:src/riscv.cpp **** #include "../lib/mem.h"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** using namespace Num;
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  12              		.loc 1 12 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE32:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
GAS LISTING /tmp/cc0uRBCP.s 			page 2


  46              	.LFB33:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** 
  18:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  19:src/riscv.cpp **** {
  47              		.loc 1 19 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55 0034 23343103 		sd	s3,40(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58              		.cfi_offset 9, -24
  59              		.cfi_offset 18, -32
  60              		.cfi_offset 19, -40
  61 0038 13040105 		addi	s0,sp,80
  62              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp ****     uint64 scause = r_scause();
  63              		.loc 1 20 5
  64              	.LBB20:
  65              	.LBB21:
  66              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** 
   3:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** #include "../lib/hw.h"
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #define READ_REG(var, regname) __asm__ volatile("mv %0, " regname: "=r"(var))
   9:src/../h/riscv.hpp **** #define WRITE_REG(regname, val) __asm__ volatile("mv " regname ", %0" :: "r"(val))
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** namespace Num{
  12:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_ALLOC = 0x01;
  13:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_FREE = 0x02;
  14:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_GET_FREE_SPACE = 0x03;
  15:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  16:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_CREATE= 0x11;
  17:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_EXIT = 0x12;
  18:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_DISPATCH = 0x13;
  19:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_OPEN = 0x21;
  20:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_CLOSE = 0x22;
  21:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_WAIT = 0x23;
  22:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_SIGNAL = 0x24;
  23:src/../h/riscv.hpp **** }
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** class Riscv
  27:src/../h/riscv.hpp **** {
  28:src/../h/riscv.hpp **** public:
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  31:src/../h/riscv.hpp ****     static void popSppSpie();
GAS LISTING /tmp/cc0uRBCP.s 			page 3


  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register scause
  34:src/../h/riscv.hpp ****     static uint64 r_scause();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register scause
  37:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register sepc
  40:src/../h/riscv.hpp ****     static uint64 r_sepc();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register sepc
  43:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stvec
  46:src/../h/riscv.hpp ****     static uint64 r_stvec();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stvec
  49:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register stval
  52:src/../h/riscv.hpp ****     static uint64 r_stval();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register stval
  55:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSip
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  60:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  61:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sip
  65:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sip
  68:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // read register sip
  71:src/../h/riscv.hpp ****     static uint64 r_sip();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sip
  74:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     enum BitMaskSstatus
  77:src/../h/riscv.hpp ****     {
  78:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  79:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  80:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  81:src/../h/riscv.hpp ****     };
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // mask set register sstatus
  84:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // mask clear register sstatus
  87:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  88:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cc0uRBCP.s 			page 4


  89:src/../h/riscv.hpp ****     // read register sstatus
  90:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // write register sstatus
  93:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // supervisor trap
  96:src/../h/riscv.hpp ****     static void supervisorTrap();
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** private:
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     // supervisor trap handler
 101:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** };
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile scause;
  67              		.loc 2 107 5
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  68              		.loc 2 108 5
  69              		.loc 2 108 72 is_stmt 0
  70              	#APP
  71              	# 108 "src/../h/riscv.hpp" 1
 109              	    return scause;
  72              		csrr a5, scause
  73              	# 0 "" 2
  74              	#NO_APP
  75 0040 233CF4FA 		sd	a5,-72(s0)
  76              		.loc 2 109 5 is_stmt 1
  77              		.loc 2 109 12 is_stmt 0
  78 0044 833784FB 		ld	a5,-72(s0)
  79              	.LVL0:
  80              	.LBE21:
  81              	.LBE20:
  21:src/riscv.cpp ****     switch((uint64)scause){
  82              		.loc 1 21 5 is_stmt 1
  83              	.LBB22:
  84 0048 1307F0FF 		li	a4,-1
  85 004c 1317F703 		slli	a4,a4,63
  86 0050 13071700 		addi	a4,a4,1
  87 0054 6384E70E 		beq	a5,a4,.L4
  88 0058 1307F0FF 		li	a4,-1
  89 005c 1317F703 		slli	a4,a4,63
  90 0060 13071700 		addi	a4,a4,1
  91 0064 636AF706 		bgtu	a5,a4,.L5
  92 0068 938787FF 		addi	a5,a5,-8
  93              	.LVL1:
  94 006c 13071000 		li	a4,1
  95 0070 6366F704 		bgtu	a5,a4,.L3
  96              	.LBB23:
  22:src/riscv.cpp ****         case 0x0000000000000008UL:
  97              		.loc 1 22 9
  23:src/riscv.cpp ****         case 0x0000000000000009UL: {
  98              		.loc 1 23 9
  99              		.loc 1 23 36
GAS LISTING /tmp/cc0uRBCP.s 			page 5


 100              	.LBB24:
  24:src/riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 101              		.loc 1 24 13
 102              	.LBB25:
 103              	.LBB26:
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile sepc;
 104              		.loc 2 119 5
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 105              		.loc 2 120 5
 106              		.loc 2 120 64 is_stmt 0
 107              	#APP
 108              	# 120 "src/../h/riscv.hpp" 1
 121              	    return sepc;
 109              		csrr a5, sepc
 110              	# 0 "" 2
 111              	.LVL2:
 112              	#NO_APP
 113 0078 2334F4FC 		sd	a5,-56(s0)
 114              		.loc 2 121 5 is_stmt 1
 115              		.loc 2 121 12 is_stmt 0
 116 007c 833484FC 		ld	s1,-56(s0)
 117              	.LBE26:
 118              	.LBE25:
 119              		.loc 1 24 38
 120 0080 93844400 		addi	s1,s1,4
 121              	.LVL3:
  25:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 122              		.loc 1 25 13 is_stmt 1
 123              	.LBB27:
 124              	.LBB28:
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stvec;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 133:src/../h/riscv.hpp ****     return stvec;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 139:src/../h/riscv.hpp **** }
GAS LISTING /tmp/cc0uRBCP.s 			page 6


 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     uint64 volatile stval;
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 145:src/../h/riscv.hpp ****     return stval;
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 151:src/../h/riscv.hpp **** }
 152:src/../h/riscv.hpp **** 
 153:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 154:src/../h/riscv.hpp **** {
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     uint64 volatile sip;
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 167:src/../h/riscv.hpp ****     return sip;
 168:src/../h/riscv.hpp **** }
 169:src/../h/riscv.hpp **** 
 170:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 171:src/../h/riscv.hpp **** {
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 173:src/../h/riscv.hpp **** }
 174:src/../h/riscv.hpp **** 
 175:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 176:src/../h/riscv.hpp **** {
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 183:src/../h/riscv.hpp **** }
 184:src/../h/riscv.hpp **** 
 185:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 186:src/../h/riscv.hpp **** {
 187:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 125              		.loc 2 187 5
 188:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 126              		.loc 2 188 5
 127              		.loc 2 188 76 is_stmt 0
 128              	#APP
 129              	# 188 "src/../h/riscv.hpp" 1
 189              	    return sstatus;
 130              		csrr a5, sstatus
 131              	# 0 "" 2
GAS LISTING /tmp/cc0uRBCP.s 			page 7


 132              	#NO_APP
 133 0088 2330F4FC 		sd	a5,-64(s0)
 134              		.loc 2 189 5 is_stmt 1
 135              		.loc 2 189 12 is_stmt 0
 136 008c 033904FC 		ld	s2,-64(s0)
 137              	.LVL4:
 138              	.LBE28:
 139              	.LBE27:
  26:src/riscv.cpp ****             uint64 scallnum;
 140              		.loc 1 26 13 is_stmt 1
  27:src/riscv.cpp ****             uint64 ret = 0;
 141              		.loc 1 27 13
  28:src/riscv.cpp ****             READ_REG(scallnum, "a7");
 142              		.loc 1 28 13
 143              		.loc 1 28 37 is_stmt 0
 144              	#APP
 145              	# 28 "src/riscv.cpp" 1
  29              	            switch (scallnum) {
 146              		mv a5, a7
 147              	# 0 "" 2
 148              	.LVL5:
 149              		.loc 1 29 13 is_stmt 1
 150              	#NO_APP
 151              	.LBB29:
 152 0094 13072001 		li	a4,18
 153 0098 6380E708 		beq	a5,a4,.L9
 154 009c 13073001 		li	a4,19
 155 00a0 6382E708 		beq	a5,a4,.L10
 156 00a4 13071001 		li	a4,17
 157 00a8 6386E704 		beq	a5,a4,.L16
 158 00ac 13050000 		li	a0,0
 159              	.LVL6:
 160              	.L11:
 161              	.LBE29:
  30:src/riscv.cpp ****                 case SCALL_MEM_ALLOC:
  31:src/riscv.cpp ****                     break;
  32:src/riscv.cpp ****                 case SCALL_MEM_FREE:
  33:src/riscv.cpp ****                     break;
  34:src/riscv.cpp ****                 case SCALL_MEM_GET_FREE_SPACE:
  35:src/riscv.cpp ****                     break;
  36:src/riscv.cpp ****                 case SCALL_MEM_GET_LARGEST_FREE_BLOCK:
  37:src/riscv.cpp ****                     break;
  38:src/riscv.cpp ****                 case SCALL_THREAD_CREATE: {
  39:src/riscv.cpp ****                     thread_t* handle;
  40:src/riscv.cpp ****                     _thread::Body body;
  41:src/riscv.cpp ****                     void* args;
  42:src/riscv.cpp ****                     READ_REG(handle, "a0");
  43:src/riscv.cpp ****                     READ_REG(body, "a1");
  44:src/riscv.cpp ****                     READ_REG(args, "a2");
  45:src/riscv.cpp ****                     *handle = _thread::createThread(body, args);
  46:src/riscv.cpp ****                     if(*handle != nullptr) ret = 0;
  47:src/riscv.cpp ****                     else ret = -1;
  48:src/riscv.cpp ****                     break;
  49:src/riscv.cpp ****                 }
  50:src/riscv.cpp ****                 case SCALL_THREAD_EXIT:
  51:src/riscv.cpp ****                     ret = _thread::exitThread();
  52:src/riscv.cpp ****                     break;
GAS LISTING /tmp/cc0uRBCP.s 			page 8


  53:src/riscv.cpp ****                 case SCALL_THREAD_DISPATCH:
  54:src/riscv.cpp ****                     _thread::dispatch();
  55:src/riscv.cpp ****                     break;
  56:src/riscv.cpp ****                 case SCALL_SEM_OPEN:
  57:src/riscv.cpp ****                     break;
  58:src/riscv.cpp ****                 case SCALL_SEM_CLOSE:
  59:src/riscv.cpp ****                     break;
  60:src/riscv.cpp ****                 case SCALL_SEM_WAIT:
  61:src/riscv.cpp ****                     break;
  62:src/riscv.cpp ****                 case SCALL_SEM_SIGNAL:
  63:src/riscv.cpp ****                     break;
  64:src/riscv.cpp ****                 default:
  65:src/riscv.cpp ****                     break;
  66:src/riscv.cpp ****             }
  67:src/riscv.cpp ****             WRITE_REG("a0", ret);
 162              		.loc 1 67 13
 163              		.loc 1 67 33 is_stmt 0
 164              	#APP
 165              	# 67 "src/riscv.cpp" 1
  68              	            w_sstatus(sstatus);
 166              		mv a0, a0
 167              	# 0 "" 2
 168              		.loc 1 68 13 is_stmt 1
 169              	.LVL7:
 170              	#NO_APP
 171              	.LBB34:
 172              	.LBB35:
 190:src/../h/riscv.hpp **** }
 191:src/../h/riscv.hpp **** 
 192:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 173              		.loc 2 194 5
 174              		.loc 2 194 77 is_stmt 0
 175              	#APP
 176              	# 194 "src/../h/riscv.hpp" 1
 195              	}
 177              		csrw sstatus, s2
 178              	# 0 "" 2
 179              	.LVL8:
 180              	#NO_APP
 181              	.LBE35:
 182              	.LBE34:
  69:src/riscv.cpp ****             w_sepc(sepc);
 183              		.loc 1 69 13 is_stmt 1
 184              	.LBB36:
 185              	.LBB37:
 126:src/../h/riscv.hpp **** }
 186              		.loc 2 126 5
 126:src/../h/riscv.hpp **** }
 187              		.loc 2 126 65 is_stmt 0
 188              	#APP
 189              	# 126 "src/../h/riscv.hpp" 1
 190              		csrw sepc, s1
 191              	# 0 "" 2
 192              	.LVL9:
 193              	#NO_APP
GAS LISTING /tmp/cc0uRBCP.s 			page 9


 194              	.L3:
 195              	.LBE37:
 196              	.LBE36:
 197              	.LBE24:
 198              	.LBE23:
 199              	.LBE22:
  70:src/riscv.cpp ****             break;
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp ****         case 0x8000000000000001UL:
  73:src/riscv.cpp ****             mc_sip(SIP_SSIP);
  74:src/riscv.cpp ****             break;
  75:src/riscv.cpp ****         case 0x8000000000000009UL:
  76:src/riscv.cpp ****             console_handler();
  77:src/riscv.cpp ****             break;
  78:src/riscv.cpp ****         default:
  79:src/riscv.cpp ****             break;
  80:src/riscv.cpp ****     }
  81:src/riscv.cpp **** }...
 200              		.loc 1 81 1
 201 00bc 83308104 		ld	ra,72(sp)
 202              		.cfi_remember_state
 203              		.cfi_restore 1
 204 00c0 03340104 		ld	s0,64(sp)
 205              		.cfi_restore 8
 206              		.cfi_def_cfa 2, 80
 207 00c4 83348103 		ld	s1,56(sp)
 208              		.cfi_restore 9
 209 00c8 03390103 		ld	s2,48(sp)
 210              		.cfi_restore 18
 211 00cc 83398102 		ld	s3,40(sp)
 212              		.cfi_restore 19
 213 00d0 13010105 		addi	sp,sp,80
 214              		.cfi_def_cfa_offset 0
 215 00d4 67800000 		jr	ra
 216              	.LVL10:
 217              	.L5:
 218              		.cfi_restore_state
 219              	.LBB45:
  21:src/riscv.cpp ****     switch((uint64)scause){
 220              		.loc 1 21 5
 221 00d8 1307F0FF 		li	a4,-1
 222 00dc 1317F703 		slli	a4,a4,63
 223 00e0 13079700 		addi	a4,a4,9
 224 00e4 E39CE7FC 		bne	a5,a4,.L3
 225              	.LBB43:
  75:src/riscv.cpp ****         case 0x8000000000000009UL:
 226              		.loc 1 75 9 is_stmt 1
  76:src/riscv.cpp ****             console_handler();
 227              		.loc 1 76 13
  76:src/riscv.cpp ****             console_handler();
 228              		.loc 1 76 28 is_stmt 0
 229 00e8 97000000 		call	console_handler@plt
 229      E7800000 
 230              	.LVL11:
  77:src/riscv.cpp ****             break;
 231              		.loc 1 77 13 is_stmt 1
 232              	.LBE43:
GAS LISTING /tmp/cc0uRBCP.s 			page 10


 233              	.LBE45:
 234              		.loc 1 81 1 is_stmt 0
 235 00f0 6FF0DFFC 		j	.L3
 236              	.LVL12:
 237              	.L16:
 238              	.LBB46:
 239              	.LBB44:
 240              	.LBB40:
 241              	.LBB38:
 242              	.LBB30:
  38:src/riscv.cpp ****                 case SCALL_THREAD_CREATE: {
 243              		.loc 1 38 17 is_stmt 1
  38:src/riscv.cpp ****                 case SCALL_THREAD_CREATE: {
 244              		.loc 1 38 43
 245              	.LBB31:
  39:src/riscv.cpp ****                     thread_t* handle;
 246              		.loc 1 39 21
  40:src/riscv.cpp ****                     _thread::Body body;
 247              		.loc 1 40 21
  41:src/riscv.cpp ****                     void* args;
 248              		.loc 1 41 21
  42:src/riscv.cpp ****                     READ_REG(handle, "a0");
 249              		.loc 1 42 21
  42:src/riscv.cpp ****                     READ_REG(handle, "a0");
 250              		.loc 1 42 43 is_stmt 0
 251              	#APP
 252              	# 42 "src/riscv.cpp" 1
 253              		mv s3, a0
 254              	# 0 "" 2
 255              	.LVL13:
  43:src/riscv.cpp ****                     READ_REG(body, "a1");
 256              		.loc 1 43 21 is_stmt 1
  43:src/riscv.cpp ****                     READ_REG(body, "a1");
 257              		.loc 1 43 41 is_stmt 0
 258              	# 43 "src/riscv.cpp" 1
 259              		mv a0, a1
 260              	# 0 "" 2
 261              	.LVL14:
  44:src/riscv.cpp ****                     READ_REG(args, "a2");
 262              		.loc 1 44 21 is_stmt 1
  44:src/riscv.cpp ****                     READ_REG(args, "a2");
 263              		.loc 1 44 41 is_stmt 0
 264              	# 44 "src/riscv.cpp" 1
 265              		mv a1, a2
 266              	# 0 "" 2
 267              	.LVL15:
  45:src/riscv.cpp ****                     *handle = _thread::createThread(body, args);
 268              		.loc 1 45 21 is_stmt 1
  45:src/riscv.cpp ****                     *handle = _thread::createThread(body, args);
 269              		.loc 1 45 52 is_stmt 0
 270              	#NO_APP
 271 0100 97000000 		call	_ZN7_thread12createThreadEPFvvEPv@plt
 271      E7800000 
 272              	.LVL16:
  45:src/riscv.cpp ****                     *handle = _thread::createThread(body, args);
 273              		.loc 1 45 29
 274 0108 23B0A900 		sd	a0,0(s3)
GAS LISTING /tmp/cc0uRBCP.s 			page 11


  46:src/riscv.cpp ****                     if(*handle != nullptr) ret = 0;
 275              		.loc 1 46 21 is_stmt 1
 276 010c 63040502 		beqz	a0,.L13
  46:src/riscv.cpp ****                     if(*handle != nullptr) ret = 0;
 277              		.loc 1 46 48 is_stmt 0
 278 0110 13050000 		li	a0,0
 279 0114 6FF0DFF9 		j	.L11
 280              	.LVL17:
 281              	.L9:
 282              	.LBE31:
  50:src/riscv.cpp ****                 case SCALL_THREAD_EXIT:
 283              		.loc 1 50 17 is_stmt 1
  51:src/riscv.cpp ****                     ret = _thread::exitThread();
 284              		.loc 1 51 21
  51:src/riscv.cpp ****                     ret = _thread::exitThread();
 285              		.loc 1 51 46 is_stmt 0
 286 0118 97000000 		call	_ZN7_thread10exitThreadEv@plt
 286      E7800000 
 287              	.LVL18:
  52:src/riscv.cpp ****                     break;
 288              		.loc 1 52 21 is_stmt 1
 289 0120 6FF01FF9 		j	.L11
 290              	.LVL19:
 291              	.L10:
  53:src/riscv.cpp ****                 case SCALL_THREAD_DISPATCH:
 292              		.loc 1 53 17
  54:src/riscv.cpp ****                     _thread::dispatch();
 293              		.loc 1 54 21
  54:src/riscv.cpp ****                     _thread::dispatch();
 294              		.loc 1 54 38 is_stmt 0
 295 0124 97000000 		call	_ZN7_thread8dispatchEv@plt
 295      E7800000 
 296              	.LVL20:
  55:src/riscv.cpp ****                     break;
 297              		.loc 1 55 21 is_stmt 1
 298              	.LBE30:
 299              	.LBE38:
  27:src/riscv.cpp ****             uint64 ret = 0;
 300              		.loc 1 27 20 is_stmt 0
 301 012c 13050000 		li	a0,0
 302              	.LBB39:
 303              	.LBB33:
  55:src/riscv.cpp ****                     break;
 304              		.loc 1 55 21
 305 0130 6FF01FF8 		j	.L11
 306              	.LVL21:
 307              	.L13:
 308              	.LBB32:
  47:src/riscv.cpp ****                     else ret = -1;
 309              		.loc 1 47 30
 310 0134 1305F0FF 		li	a0,-1
 311 0138 6FF09FF7 		j	.L11
 312              	.LVL22:
 313              	.L4:
 314              	.LBE32:
 315              	.LBE33:
 316              	.LBE39:
GAS LISTING /tmp/cc0uRBCP.s 			page 12


 317              	.LBE40:
  72:src/riscv.cpp ****         case 0x8000000000000001UL:
 318              		.loc 1 72 9 is_stmt 1
  73:src/riscv.cpp ****             mc_sip(SIP_SSIP);
 319              		.loc 1 73 13
 320              	.LBB41:
 321              	.LBB42:
 160:src/../h/riscv.hpp **** }
 322              		.loc 2 160 5
 160:src/../h/riscv.hpp **** }
 323              		.loc 2 160 64 is_stmt 0
 324 013c 93072000 		li	a5,2
 325              	.LVL23:
 326              	#APP
 327              	# 160 "src/../h/riscv.hpp" 1
 161:src/../h/riscv.hpp **** 
 328              		csrc sip, a5
 329              	# 0 "" 2
 330              		.loc 2 161 1
 331              	#NO_APP
 332 0144 6FF09FF7 		j	.L3
 333              	.LBE42:
 334              	.LBE41:
 335              	.LBE44:
 336              	.LBE46:
 337              		.cfi_endproc
 338              	.LFE33:
 340              	.Letext0:
 341              		.file 3 "src/../h/../lib/hw.h"
 342              		.file 4 "src/../h/_thread.hpp"
 343              		.file 5 "src/../lib/console.h"
GAS LISTING /tmp/cc0uRBCP.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cc0uRBCP.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc0uRBCP.s:13     .text:0000000000000000 .L0 
     /tmp/cc0uRBCP.s:14     .text:0000000000000000 .L0 
     /tmp/cc0uRBCP.s:15     .text:0000000000000004 .L0 
     /tmp/cc0uRBCP.s:17     .text:0000000000000008 .L0 
     /tmp/cc0uRBCP.s:19     .text:000000000000000c .L0 
     /tmp/cc0uRBCP.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/cc0uRBCP.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/cc0uRBCP.s:33     .text:0000000000000014 .L0 
     /tmp/cc0uRBCP.s:34     .text:0000000000000018 .L0 
     /tmp/cc0uRBCP.s:35     .text:0000000000000018 .L0 
     /tmp/cc0uRBCP.s:37     .text:000000000000001c .L0 
     /tmp/cc0uRBCP.s:39     .text:0000000000000020 .L0 
     /tmp/cc0uRBCP.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc0uRBCP.s:48     .text:0000000000000020 .L0 
     /tmp/cc0uRBCP.s:49     .text:0000000000000020 .L0 
     /tmp/cc0uRBCP.s:50     .text:0000000000000024 .L0 
     /tmp/cc0uRBCP.s:56     .text:0000000000000038 .L0 
     /tmp/cc0uRBCP.s:57     .text:0000000000000038 .L0 
     /tmp/cc0uRBCP.s:58     .text:0000000000000038 .L0 
     /tmp/cc0uRBCP.s:59     .text:0000000000000038 .L0 
     /tmp/cc0uRBCP.s:60     .text:0000000000000038 .L0 
     /tmp/cc0uRBCP.s:62     .text:000000000000003c .L0 
     /tmp/cc0uRBCP.s:67     .text:000000000000003c .L0 
     /tmp/cc0uRBCP.s:68     .text:000000000000003c .L0 
     /tmp/cc0uRBCP.s:69     .text:000000000000003c .L0 
  src/../h/riscv.hpp:108    .text:000000000000003c .L0 
     /tmp/cc0uRBCP.s:77     .text:0000000000000044 .L0 
     /tmp/cc0uRBCP.s:78     .text:0000000000000044 .L0 
     /tmp/cc0uRBCP.s:84     .text:0000000000000048 .L0 
     /tmp/cc0uRBCP.s:98     .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:99     .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:101    .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:104    .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:105    .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:106    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000074 .L0 
     /tmp/cc0uRBCP.s:115    .text:000000000000007c .L0 
     /tmp/cc0uRBCP.s:116    .text:000000000000007c .L0 
     /tmp/cc0uRBCP.s:120    .text:0000000000000080 .L0 
     /tmp/cc0uRBCP.s:125    .text:0000000000000084 .L0 
     /tmp/cc0uRBCP.s:126    .text:0000000000000084 .L0 
     /tmp/cc0uRBCP.s:127    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:188    .text:0000000000000084 .L0 
     /tmp/cc0uRBCP.s:135    .text:000000000000008c .L0 
     /tmp/cc0uRBCP.s:136    .text:000000000000008c .L0 
     /tmp/cc0uRBCP.s:141    .text:0000000000000090 .L0 
     /tmp/cc0uRBCP.s:142    .text:0000000000000090 .L0 
     /tmp/cc0uRBCP.s:143    .text:0000000000000090 .L0 
       src/riscv.cpp:28     .text:0000000000000090 .L0 
     /tmp/cc0uRBCP.s:152    .text:0000000000000094 .L0 
     /tmp/cc0uRBCP.s:163    .text:00000000000000b0 .L0 
       src/riscv.cpp:67     .text:00000000000000b0 .L0 
GAS LISTING /tmp/cc0uRBCP.s 			page 14


     /tmp/cc0uRBCP.s:173    .text:00000000000000b4 .L0 
     /tmp/cc0uRBCP.s:174    .text:00000000000000b4 .L0 
  src/../h/riscv.hpp:194    .text:00000000000000b4 .L0 
     /tmp/cc0uRBCP.s:186    .text:00000000000000b8 .L0 
     /tmp/cc0uRBCP.s:187    .text:00000000000000b8 .L0 
  src/../h/riscv.hpp:126    .text:00000000000000b8 .L0 
     /tmp/cc0uRBCP.s:201    .text:00000000000000bc .L0 
     /tmp/cc0uRBCP.s:202    .text:00000000000000c0 .L0 
     /tmp/cc0uRBCP.s:203    .text:00000000000000c0 .L0 
     /tmp/cc0uRBCP.s:205    .text:00000000000000c4 .L0 
     /tmp/cc0uRBCP.s:206    .text:00000000000000c4 .L0 
     /tmp/cc0uRBCP.s:208    .text:00000000000000c8 .L0 
     /tmp/cc0uRBCP.s:210    .text:00000000000000cc .L0 
     /tmp/cc0uRBCP.s:212    .text:00000000000000d0 .L0 
     /tmp/cc0uRBCP.s:214    .text:00000000000000d4 .L0 
     /tmp/cc0uRBCP.s:218    .text:00000000000000d8 .L0 
     /tmp/cc0uRBCP.s:221    .text:00000000000000d8 .L0 
     /tmp/cc0uRBCP.s:227    .text:00000000000000e8 .L0 
     /tmp/cc0uRBCP.s:228    .text:00000000000000e8 .L0 
     /tmp/cc0uRBCP.s:229    .text:00000000000000e8 .L0 
     /tmp/cc0uRBCP.s:234    .text:00000000000000f0 .L0 
     /tmp/cc0uRBCP.s:235    .text:00000000000000f0 .L0 
     /tmp/cc0uRBCP.s:244    .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:246    .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:247    .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:248    .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:249    .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:250    .text:00000000000000f4 .L0 
       src/riscv.cpp:42     .text:00000000000000f4 .L0 
     /tmp/cc0uRBCP.s:257    .text:00000000000000f8 .L0 
       src/riscv.cpp:43     .text:00000000000000f8 .L0 
     /tmp/cc0uRBCP.s:263    .text:00000000000000fc .L0 
       src/riscv.cpp:44     .text:00000000000000fc .L0 
     /tmp/cc0uRBCP.s:269    .text:0000000000000100 .L0 
     /tmp/cc0uRBCP.s:271    .text:0000000000000100 .L0 
     /tmp/cc0uRBCP.s:274    .text:0000000000000108 .L0 
     /tmp/cc0uRBCP.s:276    .text:000000000000010c .L0 
     /tmp/cc0uRBCP.s:278    .text:0000000000000110 .L0 
     /tmp/cc0uRBCP.s:284    .text:0000000000000118 .L0 
     /tmp/cc0uRBCP.s:285    .text:0000000000000118 .L0 
     /tmp/cc0uRBCP.s:286    .text:0000000000000118 .L0 
     /tmp/cc0uRBCP.s:289    .text:0000000000000120 .L0 
     /tmp/cc0uRBCP.s:293    .text:0000000000000124 .L0 
     /tmp/cc0uRBCP.s:294    .text:0000000000000124 .L0 
     /tmp/cc0uRBCP.s:295    .text:0000000000000124 .L0 
     /tmp/cc0uRBCP.s:300    .text:000000000000012c .L0 
     /tmp/cc0uRBCP.s:301    .text:000000000000012c .L0 
     /tmp/cc0uRBCP.s:305    .text:0000000000000130 .L0 
     /tmp/cc0uRBCP.s:310    .text:0000000000000134 .L0 
     /tmp/cc0uRBCP.s:319    .text:000000000000013c .L0 
     /tmp/cc0uRBCP.s:322    .text:000000000000013c .L0 
     /tmp/cc0uRBCP.s:323    .text:000000000000013c .L0 
     /tmp/cc0uRBCP.s:324    .text:000000000000013c .L0 
     /tmp/cc0uRBCP.s:332    .text:0000000000000144 .L0 
     /tmp/cc0uRBCP.s:337    .text:0000000000000148 .L0 
     /tmp/cc0uRBCP.s:344    .text:0000000000000148 .L0 
     /tmp/cc0uRBCP.s:313    .text:000000000000013c .L4
GAS LISTING /tmp/cc0uRBCP.s 			page 15


     /tmp/cc0uRBCP.s:217    .text:00000000000000d8 .L5
     /tmp/cc0uRBCP.s:194    .text:00000000000000bc .L3
     /tmp/cc0uRBCP.s:281    .text:0000000000000118 .L9
     /tmp/cc0uRBCP.s:291    .text:0000000000000124 .L10
     /tmp/cc0uRBCP.s:237    .text:00000000000000f4 .L16
     /tmp/cc0uRBCP.s:307    .text:0000000000000134 .L13
     /tmp/cc0uRBCP.s:160    .text:00000000000000b0 .L11
     /tmp/cc0uRBCP.s:1285   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc0uRBCP.s:2422   .debug_str:00000000000005b0 .LASF101
     /tmp/cc0uRBCP.s:2372   .debug_str:0000000000000423 .LASF102
     /tmp/cc0uRBCP.s:2296   .debug_str:00000000000001d9 .LASF103
     /tmp/cc0uRBCP.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc0uRBCP.s:340    .text:0000000000000148 .Letext0
     /tmp/cc0uRBCP.s:2224   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc0uRBCP.s:2350   .debug_str:00000000000003b6 .LASF0
     /tmp/cc0uRBCP.s:2368   .debug_str:00000000000003fd .LASF1
     /tmp/cc0uRBCP.s:2340   .debug_str:0000000000000360 .LASF2
     /tmp/cc0uRBCP.s:2282   .debug_str:000000000000016e .LASF3
     /tmp/cc0uRBCP.s:2316   .debug_str:000000000000028b .LASF4
     /tmp/cc0uRBCP.s:2398   .debug_str:00000000000004e9 .LASF5
     /tmp/cc0uRBCP.s:2252   .debug_str:0000000000000079 .LASF6
     /tmp/cc0uRBCP.s:2370   .debug_str:0000000000000410 .LASF7
     /tmp/cc0uRBCP.s:2348   .debug_str:00000000000003a3 .LASF8
     /tmp/cc0uRBCP.s:2430   .debug_str:0000000000000694 .LASF9
     /tmp/cc0uRBCP.s:2304   .debug_str:0000000000000218 .LASF10
     /tmp/cc0uRBCP.s:2380   .debug_str:0000000000000460 .LASF11
     /tmp/cc0uRBCP.s:2426   .debug_str:000000000000067e .LASF12
     /tmp/cc0uRBCP.s:2254   .debug_str:0000000000000080 .LASF13
     /tmp/cc0uRBCP.s:2230   .debug_str:0000000000000011 .LASF14
     /tmp/cc0uRBCP.s:2264   .debug_str:00000000000000da .LASF15
     /tmp/cc0uRBCP.s:2392   .debug_str:00000000000004a5 .LASF16
     /tmp/cc0uRBCP.s:2276   .debug_str:0000000000000134 .LASF17
     /tmp/cc0uRBCP.s:2256   .debug_str:0000000000000090 .LASF18
     /tmp/cc0uRBCP.s:2400   .debug_str:00000000000004fb .LASF19
     /tmp/cc0uRBCP.s:2266   .debug_str:00000000000000e6 .LASF20
     /tmp/cc0uRBCP.s:2434   .debug_str:00000000000006b9 .LASF21
     /tmp/cc0uRBCP.s:2378   .debug_str:000000000000044c .LASF22
     /tmp/cc0uRBCP.s:2332   .debug_str:00000000000002ec .LASF23
     /tmp/cc0uRBCP.s:2394   .debug_str:00000000000004bb .LASF24
     /tmp/cc0uRBCP.s:2436   .debug_str:00000000000006da .LASF25
     /tmp/cc0uRBCP.s:2402   .debug_str:000000000000050a .LASF26
     /tmp/cc0uRBCP.s:2420   .debug_str:00000000000005a1 .LASF27
     /tmp/cc0uRBCP.s:2294   .debug_str:00000000000001c8 .LASF28
     /tmp/cc0uRBCP.s:2364   .debug_str:00000000000003ec .LASF68
     /tmp/cc0uRBCP.s:2328   .debug_str:00000000000002d3 .LASF104
     /tmp/cc0uRBCP.s:2406   .debug_str:0000000000000529 .LASF29
     /tmp/cc0uRBCP.s:2362   .debug_str:00000000000003e3 .LASF30
     /tmp/cc0uRBCP.s:2322   .debug_str:00000000000002a0 .LASF31
     /tmp/cc0uRBCP.s:2390   .debug_str:000000000000049a .LASF64
     /tmp/cc0uRBCP.s:2440   .debug_str:00000000000006fc .LASF66
     /tmp/cc0uRBCP.s:2232   .debug_str:0000000000000021 .LASF32
     /tmp/cc0uRBCP.s:2290   .debug_str:000000000000019f .LASF34
     /tmp/cc0uRBCP.s:2284   .debug_str:0000000000000174 .LASF36
     /tmp/cc0uRBCP.s:2270   .debug_str:0000000000000104 .LASF38
     /tmp/cc0uRBCP.s:2346   .debug_str:000000000000039c .LASF33
     /tmp/cc0uRBCP.s:2384   .debug_str:000000000000047a .LASF35
     /tmp/cc0uRBCP.s:2428   .debug_str:000000000000068d .LASF37
GAS LISTING /tmp/cc0uRBCP.s 			page 16


     /tmp/cc0uRBCP.s:2412   .debug_str:0000000000000551 .LASF39
     /tmp/cc0uRBCP.s:2300   .debug_str:000000000000020a .LASF40
     /tmp/cc0uRBCP.s:2278   .debug_str:000000000000014a .LASF41
     /tmp/cc0uRBCP.s:2228   .debug_str:0000000000000009 .LASF42
     /tmp/cc0uRBCP.s:2310   .debug_str:0000000000000259 .LASF43
     /tmp/cc0uRBCP.s:2250   .debug_str:0000000000000071 .LASF44
     /tmp/cc0uRBCP.s:2258   .debug_str:00000000000000a0 .LASF45
     /tmp/cc0uRBCP.s:2444   .debug_str:000000000000071f .LASF46
     /tmp/cc0uRBCP.s:2292   .debug_str:00000000000001b4 .LASF47
     /tmp/cc0uRBCP.s:2352   .debug_str:00000000000003c3 .LASF48
     /tmp/cc0uRBCP.s:2438   .debug_str:00000000000006e9 .LASF49
     /tmp/cc0uRBCP.s:2248   .debug_str:000000000000006a .LASF50
     /tmp/cc0uRBCP.s:2298   .debug_str:00000000000001f7 .LASF51
     /tmp/cc0uRBCP.s:2302   .debug_str:0000000000000212 .LASF52
     /tmp/cc0uRBCP.s:2418   .debug_str:000000000000058f .LASF53
     /tmp/cc0uRBCP.s:2246   .debug_str:0000000000000064 .LASF54
     /tmp/cc0uRBCP.s:2450   .debug_str:0000000000000739 .LASF55
     /tmp/cc0uRBCP.s:2442   .debug_str:0000000000000714 .LASF56
     /tmp/cc0uRBCP.s:2396   .debug_str:00000000000004d1 .LASF57
     /tmp/cc0uRBCP.s:2366   .debug_str:00000000000003f2 .LASF58
     /tmp/cc0uRBCP.s:2408   .debug_str:0000000000000532 .LASF59
     /tmp/cc0uRBCP.s:2262   .debug_str:00000000000000d0 .LASF60
     /tmp/cc0uRBCP.s:2312   .debug_str:000000000000026d .LASF61
     /tmp/cc0uRBCP.s:2242   .debug_str:0000000000000044 .LASF62
     /tmp/cc0uRBCP.s:2306   .debug_str:0000000000000226 .LASF63
     /tmp/cc0uRBCP.s:2404   .debug_str:000000000000051a .LASF65
     /tmp/cc0uRBCP.s:2260   .debug_str:00000000000000b4 .LASF67
     /tmp/cc0uRBCP.s:2432   .debug_str:00000000000006a4 .LASF87
     /tmp/cc0uRBCP.s:2326   .debug_str:00000000000002b1 .LASF89
     /tmp/cc0uRBCP.s:2314   .debug_str:0000000000000283 .LASF69
     /tmp/cc0uRBCP.s:2238   .debug_str:0000000000000037 .LASF105
     /tmp/cc0uRBCP.s:2448   .debug_str:0000000000000730 .LASF70
     /tmp/cc0uRBCP.s:2376   .debug_str:000000000000043c .LASF72
     /tmp/cc0uRBCP.s:2374   .debug_str:0000000000000431 .LASF106
     /tmp/cc0uRBCP.s:2338   .debug_str:0000000000000345 .LASF107
     /tmp/cc0uRBCP.s:2342   .debug_str:000000000000036e .LASF71
     /tmp/cc0uRBCP.s:2336   .debug_str:000000000000032a .LASF73
     /tmp/cc0uRBCP.s:2274   .debug_str:0000000000000127 .LASF74
     /tmp/cc0uRBCP.s:2344   .debug_str:000000000000037a .LASF75
     /tmp/cc0uRBCP.s:2388   .debug_str:0000000000000495 .LASF108
     /tmp/cc0uRBCP.s:2236   .debug_str:0000000000000031 .LASF76
     /tmp/cc0uRBCP.s:2416   .debug_str:000000000000057b .LASF77
     /tmp/cc0uRBCP.s:2288   .debug_str:0000000000000197 .LASF109
     /tmp/cc0uRBCP.s:2382   .debug_str:000000000000046f .LASF78
     /tmp/cc0uRBCP.s:2286   .debug_str:000000000000017d .LASF79
     /tmp/cc0uRBCP.s:2244   .debug_str:000000000000004e .LASF80
     /tmp/cc0uRBCP.s:2320   .debug_str:000000000000029b .LASF81
     /tmp/cc0uRBCP.s:2358   .debug_str:00000000000003d9 .LASF82
     /tmp/cc0uRBCP.s:2356   .debug_str:00000000000003d3 .LASF83
     /tmp/cc0uRBCP.s:2324   .debug_str:00000000000002a9 .LASF84
     /tmp/cc0uRBCP.s:2424   .debug_str:0000000000000674 .LASF85
     /tmp/cc0uRBCP.s:2318   .debug_str:0000000000000292 .LASF86
     /tmp/cc0uRBCP.s:2330   .debug_str:00000000000002de .LASF88
     /tmp/cc0uRBCP.s:2308   .debug_str:000000000000023c .LASF90
     /tmp/cc0uRBCP.s:2272   .debug_str:0000000000000119 .LASF110
     /tmp/cc0uRBCP.s:2334   .debug_str:00000000000002fe .LASF111
     /tmp/cc0uRBCP.s:2354   .debug_str:00000000000003ca .LASF91
GAS LISTING /tmp/cc0uRBCP.s 			page 17


     /tmp/cc0uRBCP.s:2414   .debug_str:0000000000000564 .LASF92
     /tmp/cc0uRBCP.s:2226   .debug_str:0000000000000000 .LASF93
     /tmp/cc0uRBCP.s:2240   .debug_str:000000000000003f .LASF94
     /tmp/cc0uRBCP.s:46     .text:0000000000000020 .LFB33
     /tmp/cc0uRBCP.s:338    .text:0000000000000148 .LFE33
     /tmp/cc0uRBCP.s:2234   .debug_str:000000000000002a .LASF95
     /tmp/cc0uRBCP.s:2070   .debug_loc:0000000000000000 .LLST0
     /tmp/cc0uRBCP.s:2210   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc0uRBCP.s:2360   .debug_str:00000000000003de .LASF96
     /tmp/cc0uRBCP.s:2091   .debug_loc:000000000000005e .LLST1
     /tmp/cc0uRBCP.s:2386   .debug_str:000000000000048d .LASF97
     /tmp/cc0uRBCP.s:2102   .debug_loc:0000000000000094 .LLST2
     /tmp/cc0uRBCP.s:2446   .debug_str:0000000000000727 .LASF98
     /tmp/cc0uRBCP.s:2113   .debug_loc:00000000000000ca .LLST3
     /tmp/cc0uRBCP.s:2132   .debug_loc:0000000000000126 .LLST4
     /tmp/cc0uRBCP.s:2410   .debug_str:000000000000054a .LASF99
     /tmp/cc0uRBCP.s:2158   .debug_loc:0000000000000198 .LLST5
     /tmp/cc0uRBCP.s:2169   .debug_loc:00000000000001ce .LLST6
     /tmp/cc0uRBCP.s:2176   .debug_loc:00000000000001f1 .LLST7
     /tmp/cc0uRBCP.s:272    .text:0000000000000108 .LVL16
     /tmp/cc0uRBCP.s:102    .text:0000000000000074 .LBB25
     /tmp/cc0uRBCP.s:118    .text:0000000000000080 .LBE25
     /tmp/cc0uRBCP.s:123    .text:0000000000000084 .LBB27
     /tmp/cc0uRBCP.s:139    .text:0000000000000090 .LBE27
     /tmp/cc0uRBCP.s:171    .text:00000000000000b4 .LBB34
     /tmp/cc0uRBCP.s:182    .text:00000000000000b8 .LBE34
     /tmp/cc0uRBCP.s:2183   .debug_loc:0000000000000214 .LLST8
     /tmp/cc0uRBCP.s:184    .text:00000000000000b8 .LBB36
     /tmp/cc0uRBCP.s:196    .text:00000000000000bc .LBE36
     /tmp/cc0uRBCP.s:2190   .debug_loc:0000000000000237 .LLST9
     /tmp/cc0uRBCP.s:287    .text:0000000000000120 .LVL18
     /tmp/cc0uRBCP.s:296    .text:000000000000012c .LVL20
     /tmp/cc0uRBCP.s:64     .text:000000000000003c .LBB20
     /tmp/cc0uRBCP.s:81     .text:0000000000000048 .LBE20
     /tmp/cc0uRBCP.s:320    .text:000000000000013c .LBB41
     /tmp/cc0uRBCP.s:334    .text:0000000000000148 .LBE41
     /tmp/cc0uRBCP.s:230    .text:00000000000000f0 .LVL11
     /tmp/cc0uRBCP.s:10     .text:0000000000000000 .LFB32
     /tmp/cc0uRBCP.s:40     .text:0000000000000020 .LFE32
     /tmp/cc0uRBCP.s:2268   .debug_str:00000000000000ff .LASF100
     /tmp/cc0uRBCP.s:2280   .debug_str:000000000000015e .LASF112
     /tmp/cc0uRBCP.s:79     .text:0000000000000048 .LVL0
     /tmp/cc0uRBCP.s:93     .text:000000000000006c .LVL1
     /tmp/cc0uRBCP.s:111    .text:0000000000000078 .LVL2
     /tmp/cc0uRBCP.s:216    .text:00000000000000d8 .LVL10
     /tmp/cc0uRBCP.s:312    .text:000000000000013c .LVL22
     /tmp/cc0uRBCP.s:325    .text:0000000000000140 .LVL23
     /tmp/cc0uRBCP.s:121    .text:0000000000000084 .LVL3
     /tmp/cc0uRBCP.s:192    .text:00000000000000bc .LVL9
     /tmp/cc0uRBCP.s:236    .text:00000000000000f4 .LVL12
     /tmp/cc0uRBCP.s:137    .text:0000000000000090 .LVL4
     /tmp/cc0uRBCP.s:148    .text:0000000000000094 .LVL5
     /tmp/cc0uRBCP.s:159    .text:00000000000000b0 .LVL6
     /tmp/cc0uRBCP.s:280    .text:0000000000000118 .LVL17
     /tmp/cc0uRBCP.s:290    .text:0000000000000124 .LVL19
     /tmp/cc0uRBCP.s:255    .text:00000000000000f8 .LVL13
     /tmp/cc0uRBCP.s:306    .text:0000000000000134 .LVL21
GAS LISTING /tmp/cc0uRBCP.s 			page 18


     /tmp/cc0uRBCP.s:261    .text:00000000000000fc .LVL14
     /tmp/cc0uRBCP.s:267    .text:0000000000000100 .LVL15
     /tmp/cc0uRBCP.s:169    .text:00000000000000b4 .LVL7
     /tmp/cc0uRBCP.s:179    .text:00000000000000b8 .LVL8
     /tmp/cc0uRBCP.s:345    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc0uRBCP.s:100    .text:0000000000000074 .LBB24
     /tmp/cc0uRBCP.s:197    .text:00000000000000bc .LBE24
     /tmp/cc0uRBCP.s:240    .text:00000000000000f4 .LBB40
     /tmp/cc0uRBCP.s:317    .text:000000000000013c .LBE40
     /tmp/cc0uRBCP.s:245    .text:00000000000000f4 .LBB31
     /tmp/cc0uRBCP.s:282    .text:0000000000000118 .LBE31
     /tmp/cc0uRBCP.s:308    .text:0000000000000134 .LBB32
     /tmp/cc0uRBCP.s:314    .text:000000000000013c .LBE32

UNDEFINED SYMBOLS
console_handler
_ZN7_thread12createThreadEPFvvEPv
_ZN7_thread10exitThreadEv
_ZN7_thread8dispatchEv
