GAS LISTING /tmp/ccR3ftMg.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 46696E69 		.string	"Finished\n"
   9      73686564 
   9      0A00
  10              		.text
  11              		.align	2
  12              		.globl	main
  14              	main:
  15              	.LFB16:
  16              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** 
   2:src/main.cpp  **** 
   3:src/main.cpp  **** #include "../h/print.hpp"
   4:src/main.cpp  **** #include "../h/syscall_c.hpp"
   5:src/main.cpp  **** #include "../h/riscv.hpp"
   6:src/main.cpp  **** 
   7:src/main.cpp  **** void main()
   8:src/main.cpp  **** {
  17              		.loc 1 8 1
  18              		.cfi_startproc
  19 0000 130101FE 		addi	sp,sp,-32
  20              		.cfi_def_cfa_offset 32
  21 0004 233C1100 		sd	ra,24(sp)
  22 0008 23388100 		sd	s0,16(sp)
  23              		.cfi_offset 1, -8
  24              		.cfi_offset 8, -16
  25 000c 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
   9:src/main.cpp  **** 
  10:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  27              		.loc 1 10 5
  28              		.loc 1 10 19 is_stmt 0
  29 0010 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  29      83B70700 
  30              	.LVL0:
  31              	.LBB4:
  32              	.LBB5:
  33              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** 
   3:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   4:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** #include "../lib/hw.h"
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #define READ_REG(var, regname) __asm__ volatile("mv %0, " regname: "=r"(var))
   9:src/../h/riscv.hpp **** #define WRITE_REG(regname, val) __asm__ volatile("mv " regname ", %0" :: "r"(val))
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** namespace Num{
  12:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_ALLOC = 0x01;
GAS LISTING /tmp/ccR3ftMg.s 			page 2


  13:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_FREE = 0x02;
  14:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_GET_FREE_SPACE = 0x03;
  15:src/../h/riscv.hpp ****     constexpr uint8 SCALL_MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  16:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_CREATE= 0x11;
  17:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_EXIT = 0x12;
  18:src/../h/riscv.hpp ****     constexpr uint8 SCALL_THREAD_DISPATCH = 0x13;
  19:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_OPEN = 0x21;
  20:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_CLOSE = 0x22;
  21:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_WAIT = 0x23;
  22:src/../h/riscv.hpp ****     constexpr uint8 SCALL_SEM_SIGNAL = 0x24;
  23:src/../h/riscv.hpp **** }
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp **** class Riscv
  27:src/../h/riscv.hpp **** {
  28:src/../h/riscv.hpp **** public:
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  31:src/../h/riscv.hpp ****     static void popSppSpie();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register scause
  34:src/../h/riscv.hpp ****     static uint64 r_scause();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register scause
  37:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register sepc
  40:src/../h/riscv.hpp ****     static uint64 r_sepc();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register sepc
  43:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stvec
  46:src/../h/riscv.hpp ****     static uint64 r_stvec();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stvec
  49:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register stval
  52:src/../h/riscv.hpp ****     static uint64 r_stval();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register stval
  55:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSip
  58:src/../h/riscv.hpp ****     {
  59:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  60:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  61:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  62:src/../h/riscv.hpp ****     };
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask set register sip
  65:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask clear register sip
  68:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  69:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccR3ftMg.s 			page 3


  70:src/../h/riscv.hpp ****     // read register sip
  71:src/../h/riscv.hpp ****     static uint64 r_sip();
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // write register sip
  74:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     enum BitMaskSstatus
  77:src/../h/riscv.hpp ****     {
  78:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  79:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  80:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  81:src/../h/riscv.hpp ****     };
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // mask set register sstatus
  84:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // mask clear register sstatus
  87:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     // read register sstatus
  90:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // write register sstatus
  93:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // supervisor trap
  96:src/../h/riscv.hpp ****     static void supervisorTrap();
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** private:
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     // supervisor trap handler
 101:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** };
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile scause;
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 109:src/../h/riscv.hpp ****     return scause;
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile sepc;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 121:src/../h/riscv.hpp ****     return sepc;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
GAS LISTING /tmp/ccR3ftMg.s 			page 4


 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stvec;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 133:src/../h/riscv.hpp ****     return stvec;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  34              		.loc 2 138 5 is_stmt 1
  35              		.loc 2 138 69 is_stmt 0
  36              	#APP
  37              	# 138 "src/../h/riscv.hpp" 1
 139              	}
  38              		csrw stvec, a5
  39              	# 0 "" 2
  40              	.LVL1:
  41              	#NO_APP
  42              	.LBE5:
  43              	.LBE4:
  11:src/main.cpp  **** 
  12:src/main.cpp  ****     // idle nit
  13:src/main.cpp  ****     thread_t idleThread;
  44              		.loc 1 13 5 is_stmt 1
  14:src/main.cpp  ****     thread_create(&idleThread, nullptr, nullptr);
  45              		.loc 1 14 5
  46              		.loc 1 14 18 is_stmt 0
  47 001c 13060000 		li	a2,0
  48 0020 93050000 		li	a1,0
  49 0024 130584FE 		addi	a0,s0,-24
  50 0028 97000000 		call	_Z13thread_createPP7_threadPFvPvES2_@plt
  50      E7800000 
  51              	.LVL2:
  15:src/main.cpp  **** 
  16:src/main.cpp  ****     // promena rezima
  17:src/main.cpp  **** 
  18:src/main.cpp  ****     // uposleno cekanje
  19:src/main.cpp  **** 
  20:src/main.cpp  ****     printString("Finished\n");
  52              		.loc 1 20 5 is_stmt 1
  53              		.loc 1 20 16 is_stmt 0
  54 0030 17050000 		lla	a0,.LC0
  54      13050500 
  55 0038 97000000 		call	_Z11printStringPKc@plt
  55      E7800000 
  56              	.LVL3:
  21:src/main.cpp  **** }
  57              		.loc 1 21 1
  58 0040 83308101 		ld	ra,24(sp)
  59              		.cfi_restore 1
  60 0044 03340101 		ld	s0,16(sp)
  61              		.cfi_restore 8
  62              		.cfi_def_cfa 2, 32
  63 0048 13010102 		addi	sp,sp,32
GAS LISTING /tmp/ccR3ftMg.s 			page 5


  64              		.cfi_def_cfa_offset 0
  65 004c 67800000 		jr	ra
  66              		.cfi_endproc
  67              	.LFE16:
  69              	.Letext0:
  70              		.file 3 "src/../h/../lib/hw.h"
  71              		.file 4 "src/../h/syscall_c.hpp"
  72              		.file 5 "src/../h/print.hpp"
GAS LISTING /tmp/ccR3ftMg.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccR3ftMg.s:14     .text:0000000000000000 main
     /tmp/ccR3ftMg.s:18     .text:0000000000000000 .L0 
     /tmp/ccR3ftMg.s:19     .text:0000000000000000 .L0 
     /tmp/ccR3ftMg.s:20     .text:0000000000000004 .L0 
     /tmp/ccR3ftMg.s:23     .text:000000000000000c .L0 
     /tmp/ccR3ftMg.s:24     .text:000000000000000c .L0 
     /tmp/ccR3ftMg.s:26     .text:0000000000000010 .L0 
     /tmp/ccR3ftMg.s:28     .text:0000000000000010 .L0 
     /tmp/ccR3ftMg.s:29     .text:0000000000000010 .L0 
     /tmp/ccR3ftMg.s:35     .text:0000000000000018 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000018 .L0 
     /tmp/ccR3ftMg.s:45     .text:000000000000001c .L0 
     /tmp/ccR3ftMg.s:46     .text:000000000000001c .L0 
     /tmp/ccR3ftMg.s:47     .text:000000000000001c .L0 
     /tmp/ccR3ftMg.s:53     .text:0000000000000030 .L0 
     /tmp/ccR3ftMg.s:54     .text:0000000000000030 .L0 
     /tmp/ccR3ftMg.s:58     .text:0000000000000040 .L0 
     /tmp/ccR3ftMg.s:59     .text:0000000000000044 .L0 
     /tmp/ccR3ftMg.s:61     .text:0000000000000048 .L0 
     /tmp/ccR3ftMg.s:62     .text:0000000000000048 .L0 
     /tmp/ccR3ftMg.s:64     .text:000000000000004c .L0 
     /tmp/ccR3ftMg.s:66     .text:0000000000000050 .L0 
     /tmp/ccR3ftMg.s:73     .text:0000000000000050 .L0 
     /tmp/ccR3ftMg.s:29     .text:0000000000000010 .L0 
     /tmp/ccR3ftMg.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccR3ftMg.s:54     .text:0000000000000030 .L0 
     /tmp/ccR3ftMg.s:595    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccR3ftMg.s:1109   .debug_str:0000000000000239 .LASF71
     /tmp/ccR3ftMg.s:1123   .debug_str:0000000000000358 .LASF72
     /tmp/ccR3ftMg.s:1153   .debug_str:000000000000043c .LASF73
     /tmp/ccR3ftMg.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccR3ftMg.s:69     .text:0000000000000050 .Letext0
     /tmp/ccR3ftMg.s:1037   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccR3ftMg.s:1125   .debug_str:0000000000000365 .LASF0
     /tmp/ccR3ftMg.s:1095   .debug_str:00000000000001be .LASF1
     /tmp/ccR3ftMg.s:1085   .debug_str:000000000000017b .LASF2
     /tmp/ccR3ftMg.s:1167   .debug_str:00000000000004c0 .LASF3
     /tmp/ccR3ftMg.s:1059   .debug_str:0000000000000090 .LASF4
     /tmp/ccR3ftMg.s:1091   .debug_str:00000000000001a4 .LASF5
     /tmp/ccR3ftMg.s:1045   .debug_str:000000000000003f .LASF6
     /tmp/ccR3ftMg.s:1041   .debug_str:0000000000000013 .LASF7
     /tmp/ccR3ftMg.s:1077   .debug_str:0000000000000131 .LASF8
     /tmp/ccR3ftMg.s:1141   .debug_str:00000000000003d6 .LASF9
     /tmp/ccR3ftMg.s:1057   .debug_str:0000000000000082 .LASF10
     /tmp/ccR3ftMg.s:1197   .debug_str:0000000000000590 .LASF11
     /tmp/ccR3ftMg.s:1081   .debug_str:0000000000000157 .LASF12
     /tmp/ccR3ftMg.s:1181   .debug_str:0000000000000514 .LASF13
     /tmp/ccR3ftMg.s:1135   .debug_str:00000000000003a1 .LASF14
     /tmp/ccR3ftMg.s:1099   .debug_str:00000000000001df .LASF15
     /tmp/ccR3ftMg.s:1069   .debug_str:00000000000000e8 .LASF16
     /tmp/ccR3ftMg.s:1147   .debug_str:0000000000000407 .LASF17
     /tmp/ccR3ftMg.s:1149   .debug_str:000000000000041d .LASF18
     /tmp/ccR3ftMg.s:1165   .debug_str:00000000000004b8 .LASF74
     /tmp/ccR3ftMg.s:1195   .debug_str:0000000000000580 .LASF19
     /tmp/ccR3ftMg.s:1145   .debug_str:00000000000003f8 .LASF20
GAS LISTING /tmp/ccR3ftMg.s 			page 7


     /tmp/ccR3ftMg.s:1043   .debug_str:0000000000000026 .LASF21
     /tmp/ccR3ftMg.s:1071   .debug_str:00000000000000fe .LASF22
     /tmp/ccR3ftMg.s:1053   .debug_str:0000000000000068 .LASF23
     /tmp/ccR3ftMg.s:1067   .debug_str:00000000000000d6 .LASF24
     /tmp/ccR3ftMg.s:1061   .debug_str:0000000000000097 .LASF25
     /tmp/ccR3ftMg.s:1187   .debug_str:000000000000054b .LASF26
     /tmp/ccR3ftMg.s:1189   .debug_str:000000000000055a .LASF27
     /tmp/ccR3ftMg.s:1129   .debug_str:000000000000037a .LASF28
     /tmp/ccR3ftMg.s:1139   .debug_str:00000000000003c5 .LASF29
     /tmp/ccR3ftMg.s:1051   .debug_str:0000000000000062 .LASF75
     /tmp/ccR3ftMg.s:1107   .debug_str:000000000000022e .LASF62
     /tmp/ccR3ftMg.s:1169   .debug_str:00000000000004c6 .LASF64
     /tmp/ccR3ftMg.s:1111   .debug_str:00000000000002fd .LASF30
     /tmp/ccR3ftMg.s:1047   .debug_str:0000000000000046 .LASF32
     /tmp/ccR3ftMg.s:1113   .debug_str:0000000000000306 .LASF34
     /tmp/ccR3ftMg.s:1063   .debug_str:00000000000000ad .LASF36
     /tmp/ccR3ftMg.s:1157   .debug_str:000000000000047c .LASF31
     /tmp/ccR3ftMg.s:1089   .debug_str:0000000000000191 .LASF33
     /tmp/ccR3ftMg.s:1075   .debug_str:000000000000012a .LASF35
     /tmp/ccR3ftMg.s:1079   .debug_str:0000000000000144 .LASF37
     /tmp/ccR3ftMg.s:1127   .debug_str:0000000000000372 .LASF38
     /tmp/ccR3ftMg.s:1161   .debug_str:0000000000000499 .LASF39
     /tmp/ccR3ftMg.s:1093   .debug_str:00000000000001b6 .LASF40
     /tmp/ccR3ftMg.s:1137   .debug_str:00000000000003b1 .LASF41
     /tmp/ccR3ftMg.s:1171   .debug_str:00000000000004de .LASF42
     /tmp/ccR3ftMg.s:1065   .debug_str:00000000000000c2 .LASF43
     /tmp/ccR3ftMg.s:1087   .debug_str:0000000000000189 .LASF44
     /tmp/ccR3ftMg.s:1183   .debug_str:0000000000000524 .LASF45
     /tmp/ccR3ftMg.s:1191   .debug_str:000000000000056a .LASF46
     /tmp/ccR3ftMg.s:1039   .debug_str:0000000000000000 .LASF47
     /tmp/ccR3ftMg.s:1049   .debug_str:000000000000005b .LASF48
     /tmp/ccR3ftMg.s:1133   .debug_str:000000000000038e .LASF49
     /tmp/ccR3ftMg.s:1179   .debug_str:000000000000050e .LASF50
     /tmp/ccR3ftMg.s:1143   .debug_str:00000000000003e6 .LASF51
     /tmp/ccR3ftMg.s:1055   .debug_str:000000000000007c .LASF52
     /tmp/ccR3ftMg.s:1177   .debug_str:00000000000004fc .LASF53
     /tmp/ccR3ftMg.s:1117   .debug_str:0000000000000319 .LASF54
     /tmp/ccR3ftMg.s:1119   .debug_str:0000000000000324 .LASF55
     /tmp/ccR3ftMg.s:1163   .debug_str:00000000000004ad .LASF56
     /tmp/ccR3ftMg.s:1105   .debug_str:0000000000000216 .LASF57
     /tmp/ccR3ftMg.s:1115   .debug_str:000000000000030f .LASF58
     /tmp/ccR3ftMg.s:1151   .debug_str:0000000000000426 .LASF59
     /tmp/ccR3ftMg.s:1175   .debug_str:00000000000004f2 .LASF60
     /tmp/ccR3ftMg.s:1159   .debug_str:0000000000000483 .LASF61
     /tmp/ccR3ftMg.s:1193   .debug_str:0000000000000571 .LASF63
     /tmp/ccR3ftMg.s:1121   .debug_str:000000000000033c .LASF65
     /tmp/ccR3ftMg.s:1083   .debug_str:0000000000000166 .LASF76
     /tmp/ccR3ftMg.s:1155   .debug_str:000000000000045a .LASF77
     /tmp/ccR3ftMg.s:1131   .debug_str:0000000000000389 .LASF78
     /tmp/ccR3ftMg.s:15     .text:0000000000000000 .LFB16
     /tmp/ccR3ftMg.s:67     .text:0000000000000050 .LFE16
     /tmp/ccR3ftMg.s:1073   .debug_str:000000000000011f .LASF66
     /tmp/ccR3ftMg.s:31     .text:0000000000000018 .LBB4
     /tmp/ccR3ftMg.s:43     .text:000000000000001c .LBE4
     /tmp/ccR3ftMg.s:51     .text:0000000000000030 .LVL2
     /tmp/ccR3ftMg.s:56     .text:0000000000000040 .LVL3
     /tmp/ccR3ftMg.s:1103   .debug_str:0000000000000210 .LASF79
GAS LISTING /tmp/ccR3ftMg.s 			page 8


     /tmp/ccR3ftMg.s:1101   .debug_str:00000000000001eb .LASF67
     /tmp/ccR3ftMg.s:1097   .debug_str:00000000000001d1 .LASF69
     /tmp/ccR3ftMg.s:1185   .debug_str:0000000000000538 .LASF68
     /tmp/ccR3ftMg.s:1173   .debug_str:00000000000004e6 .LASF70
     /tmp/ccR3ftMg.s:74     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv14supervisorTrapEv
_Z13thread_createPP7_threadPFvPvES2_
_Z11printStringPKc
